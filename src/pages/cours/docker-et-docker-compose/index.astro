---
import type { Breadcrumb } from "../../../types/Breadcrumb";
import type { Chapter } from "../../../types/Chapter";
import type { Cheatsheet } from "../../../types/Cheatsheet";

import BaseLayout from "../../../layouts/BaseLayout.astro";
import Testimonial from "../../../components/Testimonial.astro";
import Card from "../../../components/Card.astro";
import Button from "../../../components/Button.astro";

import { TESTIMONIALS } from "../../../data/testimonials";

const pageTitle = "Conteneurisez vos applications avec Docker";
const pageDescription = "Une super description";

const courseChapters = Object.values(
  import.meta.glob("./chapitres/*.md", { eager: true }),
) as Chapter[];
const cheatsheets = Object.values(
  import.meta.glob("../../fiches/*.md", { eager: true }),
) as Cheatsheet[];

const sortedChapters = [...courseChapters].sort((a, b) => {
  if (a.frontmatter.sectionNumber === b.frontmatter.sectionNumber) {
    return a.frontmatter.chapterNumber - b.frontmatter.chapterNumber;
  }

  return a.frontmatter.sectionNumber - b.frontmatter.sectionNumber;
});

const sections = new Map<number, Chapter[]>();
for (const chapter of sortedChapters) {
  const sectionNumber = chapter.frontmatter.sectionNumber;
  if (!sections.has(sectionNumber)) {
    sections.set(sectionNumber, []);
  }
  sections.get(sectionNumber)?.push(chapter);
}

const breadCrumbs: Breadcrumb[] = [
  {
    pageName: "Accueil",
    pageUrl: "/",
  },
  {
    pageName: "Cours",
    pageUrl: "/cours",
  },
];
---

<BaseLayout
  title={pageTitle}
  description={pageDescription}
  breadcrumbs={breadCrumbs}
>
  <main class="main-wrapper">
    <section class="course-heading">
      <h1 class="course-title">{pageTitle}</h1>
      <img class="course-picture" src="/port-sous-neige.png" alt="" />
      <p>
        Apprenez à utiliser Docker et docker compose par la pratique. Découvrez
        comment Docker peut faciliter le développement d'applications et leur
        mise en production.
      </p>
      <Button label="Commencer le cours" type="primary" href="#" />
    </section>
    <section class="skills-section">
      <h2>Objectifs pédagogiques</h2>
      <p>Un peu de blabla sur pourquoi Docker est important</p>
      <p>A la fin de ce cours, vous serez capable de :</p>
      <ul>
        <li>
          Manger des sushis et aimer ça ;
        </li>
        <li>
          Coder avec le cul en toute confidence et ne pas faire d'erreurs ;
        </li>
        <li>Être le roi ou la reine de la soirée.</li>
      </ul>
    </section>
    <section class="course-content-section">
      <h2>Contenu du cours</h2>
      <ul>
        {
          Array.from(sections.entries()).map(([sectionNumber, chapters]) => (
            <li>
              <h3>{chapters[0].frontmatter.sectionTitle}</h3>
              <ul>
                {chapters.map((chapter) => (
                  <li>
                    <a href={chapter.url}>{chapter.frontmatter.title}</a>
                  </li>
                ))}
              </ul>
            </li>
          ))
        }
      </ul>
    </section>
    <section class="testimonials-section">
      <h2>Testimonials</h2>
      <ul class="testimonials-list">
        {
          TESTIMONIALS.map((testimonial) => (
            <li>
              <Testimonial
                content={testimonial.content}
                job={testimonial.job}
                name={testimonial.name}
                picture={testimonial.picture}
              />
            </li>
          ))
        }
      </ul>
    </section>
    <section class="banner-section">
      <h2>Prêt.e à passer à l'action ?</h2>
      <Button label="Commencer le cours" type="primary" href="#" />
    </section>
    <section class="related-content-section">
      <h2>Related content</h2>
      <ul class="related-content-list">
        {
          cheatsheets
            .filter((cheatsheet) =>
              cheatsheet.frontmatter.title.includes("Docker"),
            )
            .sort(
              (item1, item2) =>
                new Date(item2.frontmatter.publishedDate).getTime() -
                new Date(item1.frontmatter.publishedDate).getTime(),
            )
            .map((cheatsheet) => (
              <li>
                <Card
                  author={cheatsheet.frontmatter.author}
                  description={cheatsheet.frontmatter.description}
                  href={cheatsheet.url!}
                  imgAlt={cheatsheet.frontmatter.imgAlt}
                  imgSrc={cheatsheet.frontmatter.imgSrc}
                  kind="Fiche Technique"
                  level={cheatsheet.frontmatter.level}
                  publishedDate={cheatsheet.frontmatter.publishedDate}
                  title={cheatsheet.frontmatter.title}
                />
              </li>
            ))
        }
      </ul>
    </section>
  </main>
</BaseLayout>

<style>
  .main-wrapper {
    max-width: 1100px;
    width: 90%;
    margin-left: auto;
    margin-right: auto;
  }

  .main-wrapper a {
    color: #bababa;

    &:hover {
      color: #4effa0;
    }
  }

  .course-heading {
    margin-bottom: 32px;
  }

  h1 {
    font-size: 32px;
  }

  h2 {
    font-size: 24px;
  }

  .course-picture {
    margin-bottom: 24px;
  }

  .skills-section {
    li {
      margin-bottom: 16px;
    }
  }

  .testimonials-list {
    padding-left: 0;
    list-style-type: none;
    display: flex;
    overflow: scroll;
    gap: 24px;

    li {
      min-width: 80%;
    }
  }

  .banner-section {
    background-color: #252525;
    padding: 32px 24px;
    border-radius: 8px;
    margin-bottom: 32px;

    h2 {
      margin-bottom: 24px;
    }
  }

  .related-content-list {
    padding-left: 0;
    list-style-type: none;
  }
</style>
