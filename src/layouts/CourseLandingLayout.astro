---
import type { Breadcrumb } from "../types/Breadcrumb";
import type { Testimonial } from "../types/Testimonial";
import type { Chapter } from "../types/Chapter"

interface Props {
  srcPicture: string;
  altPicture: string;
  courseTitle: string;
  courseDescription: string;
  courseUrl: string;
  courseTestimonials: readonly Testimonial[];
  quizUrl: string,
  courseChapters: Chapter[]
}

import BaseLayout from "./BaseLayout.astro";
import Button from "../components/Button.astro";
import TestimonialComponent from "../components/Testimonial.astro";

const breadCrumbs: Breadcrumb[] = [
  {
    pageName: "Accueil",
    pageUrl: "/",
  },
  {
    pageName: "Cours",
    pageUrl: "/cours",
  },
];

const {
  altPicture,
  srcPicture,
  courseTitle,
  courseDescription,
  courseUrl,
  courseTestimonials,
  quizUrl,
  courseChapters
  } = Astro.props;

const sortedChapters = [...courseChapters].sort((a, b) => {
  if (a.frontmatter.sectionNumber === b.frontmatter.sectionNumber) {
    return a.frontmatter.chapterNumber - b.frontmatter.chapterNumber;
  }

  return a.frontmatter.sectionNumber - b.frontmatter.sectionNumber;
});

const sections = new Map<number, Chapter[]>();
for (const chapter of sortedChapters) {
  const sectionNumber = chapter.frontmatter.sectionNumber;
  if (!sections.has(sectionNumber)) {
    sections.set(sectionNumber, []);
  }
  sections.get(sectionNumber)?.push(chapter);
}
---

<BaseLayout
  title={courseTitle}
  description={courseDescription}
  breadcrumbs={breadCrumbs}
>
  <main class="main-wrapper">
    <section class="main-section">
      <div>
        <section class="course-heading">
          <h1 class="course-title">{courseTitle}</h1>
          <img class="course-picture" src={srcPicture} alt={altPicture} />
          <p>{courseDescription}</p>
          <Button label="Commencer le cours" type="primary" href={courseUrl} />
        </section>
        <section class="skills-section">
          <h2>Objectifs pédagogiques</h2>
        </section>
        <section class="course-content-section">
          <h2>Contenu du cours</h2>
          <ol class="course-content-sections">
            {
              Array.from(sections.entries()).map(
                ([sectionNumber, chapters]) => (
                  <li>
                    <h3 class="course-content-section-title">
                      {chapters[0].frontmatter.sectionTitle}
                    </h3>
                    <ol class="course-content-chapters">
                      {chapters.map((chapter) => (
                        <li>
                          <a href={chapter.url}>{chapter.frontmatter.title}</a>
                        </li>
                      ))}
                    </ol>
                  </li>
                ),
              )
            }
          </ol>
        </section>
      </div>
      <aside class="course-information">
        <div class="aside-wrapper">
          <h2>Détails du cours</h2>

          <div class="course-info">
            <p><strong>Durée :</strong> 12 heures</p>
            <p><strong>Niveau :</strong> Intermédiaire</p>
          </div>

          <ul class="course-goals">
            <li>
              <svg
                class="check-icon"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <use xlink:href="#check-icon"></use>
              </svg>
              Créez vos propres images Docker
            </li>
            <li>
              <svg
                class="check-icon"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <use xlink:href="#check-icon"></use>
              </svg>
              Déployez une app complète
            </li>
            <li>
              <svg
                class="check-icon"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <use xlink:href="#check-icon"></use>
              </svg>
              Optimisez vos builds pour la prod
            </li>
          </ul>

          <div class="aside-wrapper-buttons">
            <Button
              label="Commencer le cours"
              type="primary"
              href="/cours/docker-et-docker-compose/chapitres/decouverte-docker"
            />
            <Button
              label="Passer un quiz de niveau"
              type="secondary"
              href="/quiz/quiz-niveau-docker"
            />
          </div>
          <p class="course-note">
            <svg
              class="locker-icon"
              viewBox="0 0 52 52"
              xmlns="http://www.w3.org/2000/svg"
            >
              <use xlink:href="#locker-icon"></use>
            </svg>
            Gratuit, sans inscription
          </p>
        </div>
      </aside>
    </section>
    <section class="testimonials-section">
      <h2>Testimonials</h2>
      <ul class="testimonials-list">
        {
          courseTestimonials.map((testimonial) => (
            <li>
              <TestimonialComponent
                content={testimonial.content}
                job={testimonial.job}
                name={testimonial.name}
                picture={testimonial.picture}
              />
            </li>
          ))
        }
      </ul>
    </section>
    <section class="banner-section">
      <h2>Prêt.e à passer à l'action ?</h2>
      <div class="banner-section-buttons">
        <Button
          label="Commencer le cours"
          type="primary"
          href={courseUrl}
        />
        <Button
          label="Passer un quiz de niveau"
          type="secondary"
          href={quizUrl}
        />
      </div>
    </section>
  </main>
</BaseLayout>

<style>
  .main-wrapper {
    max-width: 1100px;
    width: 90%;
    margin-left: auto;
    margin-right: auto;
  }

  .main-wrapper a {
    color: var(--linkColor);
    transition: 0.4s;

    &:hover {
      color: var(--linkHoverColor);
    }
  }

  .course-heading {
    margin-bottom: 48px;
  }

  h1 {
    font-size: 32px;
  }

  h2 {
    font-size: 24px;
  }

  .course-picture {
    margin-bottom: 24px;
    width: 100%;
    object-fit: cover;
  }

  .skills-section {
    ul {
      list-style-type: none;
    }

    li {
      margin-bottom: 16px;
      list-style-image: none;
      position: relative;

      svg {
        position: absolute;
        left: -32px;
      }
    }
  }

  .check-icon {
    width: 24px;
    height: 24px;
  }

  .locker-icon {
    height: 30px;
    width: 30px;
  }

  .course-content-sections {
    list-style-type: none;
    padding-left: 0;

    > li {
      margin-bottom: 48px;
    }
  }

  .course-content-section-title {
    margin-bottom: 16px;
    color: var(--titleColor);
  }

  .course-content-chapters {
    > li {
      margin-bottom: 16px;
    }

    a {
      color: var(--textColor) !important;
    }

    a:hover {
      color: var(--linkHoverColor) !important;
    }
  }

  .course-information {
    display: none;
  }

  .testimonials-list {
    padding-left: 0;
    list-style-type: none;
    display: flex;
    overflow: scroll;
    gap: 24px;

    li {
      min-width: 80%;
    }

    li:last-child {
      margin-right: 48px;
    }
  }

  .banner-section {
    background-color: var(--backgroundColorSecondary);
    padding: 32px 24px;
    border-radius: 8px;
    margin-bottom: 32px;

    h2 {
      margin-bottom: 24px;
    }
  }

  .banner-section-buttons {
    display: grid;
    gap: 24px;
  }

  .related-content-list {
    padding-left: 0;
    list-style-type: none;
  }

  @media screen and (min-width: 768px) {
    .main-wrapper {
      display: flex;
      flex-direction: column;
      gap: 28px;
    }

    .testimonials-list li {
      min-width: 45%;
    }

    .related-content-list {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 24px;
    }
  }

  @media screen and (min-width: 1024px) {
    .skills-section {
      margin-bottom: 40px;
    }

    .testimonials-list {
      overflow: unset;
    }

    .testimonials-list li {
      min-width: 31.75%;
    }

    .related-content-list {
      grid-template-columns: repeat(3, 1fr);
      gap: 36px;
    }

    .main-section {
      display: grid;
      grid-template-columns: 65% 30%;
      gap: 64px;
    }

    .course-information {
      display: initial;
    }

    .aside-wrapper {
      background: var(--backgroundColorSecondary);
      border-radius: 4px;
      border: 1px solid var(--borderPrimary);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
      padding: 24px;
      position: sticky;
      top: 24px;

      .course-info {
        margin-bottom: 32px;
      }

      .course-info p {
        margin: 0.25rem 0;
      }

      .course-goals {
        list-style: none;
        margin-bottom: 40px;
      }

      .course-goals li {
        margin-bottom: 0.5rem;
        position: relative;

        svg {
          position: absolute;
          left: -32px;
        }

        path {
          stroke: var(--buttonColorPrimary);
        }
      }

      li {
        margin-bottom: 8px;
      }

      .aside-wrapper-buttons {
        margin-bottom: 24px;
      }

      .course-note {
        font-size: 0.85rem;
        color: var(--textColor);
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        margin-bottom: 0;
      }
    }

    .banner-section {
      padding: 48px 32px;

      h2 {
        margin-bottom: 36px;
      }
    }

    .banner-section-buttons {
      grid-template-columns: max-content max-content;
    }

    .aside-wrapper-buttons {
      display: grid;
      gap: 12px;
    }
  }
</style>
