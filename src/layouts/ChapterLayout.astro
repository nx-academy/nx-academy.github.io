---
type Heading = {
  depth: number;
  slug: string;
  text: string;
};

interface Props {
  frontmatter: {
    title: string;
    description: string;
    previousChapterLink?: string;
    nextChapterLink?: string;
  };
  headings: Heading[];
  url: string;
}

import { handleLinks } from "../utils/handleLinks";
import BaseLayout from "./BaseLayout.astro";
import Button from "../components/Button.astro";
import StickyOutline from "../components/StickyOutline.astro";

const {
  frontmatter: { title, description, nextChapterLink, previousChapterLink },
  headings,
  url,
} = Astro.props;

const { baseUrl, breadcrumbs } = handleLinks(url);

const previousFullChapterLink = `${baseUrl}/chapitres/${previousChapterLink}`;
const nextFullChapterLink = `${baseUrl}/chapitres/${nextChapterLink}`;
---

<BaseLayout title={title} description={description} breadcrumbs={breadcrumbs}>
  <div class="main-wrapper">
    <section>
      <slot />
      <div class="end-chapter-wrapper">
        <div class="buttons-group">
          {
            previousChapterLink && (
              <Button
                label="Revenir au chapitre précédent"
                type="secondary"
                href={previousFullChapterLink}
              />
            )
          }
          {
            nextChapterLink && (
              <Button
                label="Passer au prochain chapitre"
                type="primary"
                href={nextFullChapterLink}
              />
            )
          }
        </div>
      </div>
    </section>
    <aside>
      <div class="aside-wrapper">
        <StickyOutline headings={headings} pageType="cours" />
        <div class="buttons-group">
          {
            previousChapterLink && (
              <Button
                label="Revenir au chapitre précédent"
                type="secondary"
                href={previousFullChapterLink}
              />
            )
          }
          {
            nextChapterLink && (
              <Button
                label="Passer au prochain chapitre"
                type="primary"
                href={nextFullChapterLink}
              />
            )
          }
        </div>
      </div>
    </aside>
  </div>
  <div class="image-modal-wrapper hidden">
    <div class="image-modal">
      <img src="" alt="" />
    </div>
  </div>
  <script src="https://player.vimeo.com/api/player.js"></script>
</BaseLayout>

<style>
  .main-wrapper {
    padding-bottom: 1.5rem;
    width: 90%;
    max-width: 1100px;
    margin-left: auto;
    margin-right: auto;

    @media screen and (min-width: 1024px) {
      display: grid;
      grid-template-columns: 65% 30%;
      gap: 64px;
    }
  }

  .aside-wrapper {
    display: none;

    @media screen and (min-width: 1024px) {
      background-color: var(--backgroundColorSecondary);
      border-radius: 4px;
      border: 1px solid var(--borderPrimary);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
      display: block;
      padding: 24px;
      position: sticky;
      top: 24px;
    }
  }

  .end-chapter-wrapper {
    border-top: 1px solid var(--borderPrimary);
    margin-top: 4rem;
    padding-top: 4rem;
    width: 100%;
  }

  .buttons-group {
    display: flex;
    flex-direction: column;
    gap: 16px;
    width: 100%;
    margin-bottom: 16px;

    a {
      width: 100%;
      text-align: center;
    }
  }

  .end-chapter-wrapper .buttons-group {
    flex-direction: column;

    @media screen and (min-width: 1024px) {
      flex-direction: row;
    }
  }

  .hidden {
    display: none !important;
  }

  .image-modal-wrapper {
    position: fixed;
    left: 0;
    top: 0;
    background-color: rgba(0, 0, 0, 0.7);
    content: "";
    height: 100vh;
    width: 100vw;
  }

  .image-modal {
    width: 90%;
    max-width: 1100px;
    margin-left: auto;
    margin-right: auto;
    display: flex;
    align-items: center;
    height: 100%;
  }

  .image-modal img {
    width: 100%;
    object-fit: cover;
    max-height: 500px;
  }
</style>

<style is:global>
  .hero-image {
    aspect-ratio: 1792 / 1024;
    object-fit: cover;
    width: 100%;
    display: block;
  }

  img {
    max-width: 100%;
    border-radius: 8px;
    cursor: pointer;
  }

  h1 {
    font-size: 2.5rem;
    margin-top: 0;
    margin-bottom: 1rem;
    color: var(--titleColor);
  }

  h2 {
    font-size: 1.75rem;
    margin-bottom: 1rem;
    color: var(--titleColor);
  }

  p {
    margin-bottom: 1.5rem;
    color: var(--textColor);
    font-size: clamp(0.875rem, 0.75rem + 1.5vw, 1.125rem);
  }

  ul {
    color: var(--textColor);
    margin-bottom: 2.5rem;
  }

  li {
    margin-bottom: 1.5rem;
    color: var(--textColor);
    font-size: clamp(0.875rem, 0.75rem + 1.5vw, 1.125rem);
  }

  hr {
    margin-bottom: 3rem;
    margin-top: 2rem;
  }

  a {
    text-decoration: none;
    color: var(--articleLinkColor);
    font-weight: 500;
    transition: 0.4s color;

    &:hover {
      color: var(--articleLinkHoverColor);
    }
  }

  p > code,
  li > code {
    background-color: var(--codeBackgroundColor);
    padding: 0.25rem;
    color: var(--codeTextColor);
  }

  pre,
  ul {
    margin-bottom: 1.75rem;
  }

  blockquote {
    padding-left: 2rem;
    font-style: italic;
  }

  iframe {
    width: 100%;
    height: 450px;
    margin-top: 32px;
    margin-bottom: 32px;
  }

  small {
    font-size: 14px;
    color: var(--textColor);
    margin-bottom: 2.5rem;
    display: block;
  }
</style>

<script>
  import handleReadingTime from "../utils/estimateReadingTime";
  handleReadingTime();

  const $modal = document.querySelector(
    ".image-modal-wrapper",
  ) as HTMLDivElement;
  const $images = document.querySelectorAll("img");
  const $imageModal = document.querySelector(
    ".image-modal img",
  ) as HTMLImageElement;

  $images.forEach(($image) =>
    $image.addEventListener("click", () => {
      const imgSrc = $image.getAttribute("src") as string;
      const imgAlt = $image.getAttribute("alt") as string;

      $imageModal.setAttribute("src", imgSrc);
      $imageModal.setAttribute("alt", imgAlt);

      $modal.classList.remove("hidden");
      document.body.style.overflow = "hidden";
    }),
  );

  $modal.addEventListener("click", () => {
    $modal.classList.add("hidden");
    document.body.style.overflow = "";
  });

  document.querySelectorAll(".main-wrapper h2").forEach((h2) => {
    const prev = h2.previousElementSibling;

    if (prev?.tagName === "P" && prev.querySelector("img")) {
      const prevImage = prev.querySelector("img");

      if (prevImage) {
        prevImage.classList.add("hero-image");
      }
    }
  });
</script>
