---
import type { Breadcrumb } from "../types/Breadcrumb"

type Heading = {
  depth: number;
  slug: string;
  text: string;
};

interface Props {
  frontmatter: {
    title: string;
    description: string;
    previousChapterLink?: string
    nextChapterLink?: string
  };
  headings: Heading[];
}

import theme from "../config/theme";
import BaseLayout from "./BaseLayout.astro";
import Heading3 from "../components/Heading3.astro";
import Button from "../components/Button.astro";

const {
  colors: { neonGreen, neonGreenLight, black },
} = theme;

const {
  frontmatter: { title, description, nextChapterLink, previousChapterLink },
  headings,
} = Astro.props;

const sectionsHeading = headings.filter((heading) => heading.depth === 2);

const previousNextChapterLink = `/cours/docker-et-docker-compose/chapitres/${previousChapterLink}`
const fullNextChapterLink = `/cours/docker-et-docker-compose/chapitres/${nextChapterLink}`

const breadCrumbs: Breadcrumb[] = [
  {
    pageName: "NX Academy",
    pageUrl: "/",
  },
  {
    pageName: "Cours",
    pageUrl: "/cours",
  },
  {
    pageName: "Conteneurisez vos applications avec Docker",
    pageUrl: "/cours/docker-et-docker-compose"
  }
];
---

<BaseLayout title={title} description={description} breadcrumbs={breadCrumbs}>
  <div class="main-wrapper">
    <div>
        <slot />
        <div class="end-chapter-wrapper">
          <div class="buttons-group">
            {
              previousChapterLink && <Button label="Revenir au chapitre précédent" type="secondary" href={previousNextChapterLink} />
            }
            {
              nextChapterLink && <Button label="Passer au prochain chapitre" type="primary" href={fullNextChapterLink} />
            }
          </div>
        </div>
    </div>
    <div class="aside-wrapper">
      <aside>
        <Heading3 content="Contenu" />
        <ul class="chapter-content">
          {
            sectionsHeading.map((heading) => (
              <li>
                <a class="section-link" href=`#${heading.slug}`>{heading.text}</a>
              </li>
            ))
          }
        </ul>
        <div class="buttons-group">
          {
            previousChapterLink && <Button label="Revenir au chapitre précédent" type="secondary" href={previousNextChapterLink} />
          }
          {
            nextChapterLink && <Button label="Passer au prochain chapitre" type="primary" href={fullNextChapterLink} />
          }
        </div>
      </aside>
    </div>
  </div>
</BaseLayout>

<style>
  .main-wrapper {
    padding-bottom: 1.5rem;
    width: 90%;
    max-width: 1100px;
    margin-left: auto;
    margin-right: auto;

    @media screen and (min-width: 1024px) {
      display: grid;
      grid-template-columns: 65% 30%;
      gap: 64px;
    }
  }

  aside {
    display: none;

    @media screen and (min-width: 1024px) {
      display: initial;
      position: sticky;
      top: 24px;
    }
  }

  .chapter-content {
    margin-top: 1.75rem;
    list-style-type: none;
    padding-left: 0;
    margin-bottom: 5rem;

    li {
      margin-bottom: 1rem;
    }
  }

  .section-link {
    color: #bababa;
    
    &:hover {
        color: #4effa0;
    }
  }

  .end-chapter-wrapper {
    border-top: 1px solid #eee;
    margin-top: 4rem;
    padding-top: 4rem;
    width: 100%;
  }

  .buttons-group {
    display: flex;
    flex-direction: column;
    gap: 16px;
    width: 100%;

    a {
      width: 100%;
      text-align: center;
    }
  }

  .end-chapter-wrapper .buttons-group {
    flex-direction: column;

    @media screen and (min-width: 1024px) {
      flex-direction: row;
    }
  }

  .active {
    color: #4effa0;
  }
</style>

<style is:global define:vars={{ neonGreen, neonGreenLight, black }}>
  .hero-image {
    aspect-ratio: 1792 / 1024;
    object-fit: cover;
    width: 100%;
    display: block;
  }

  img {
    max-width: 100%;
    border-radius: 8px;
  }

  article {
    max-inline-size: 66ch;
  }

  h1 {
    font-size: 2.5rem;
    margin-top: 0;
    margin-bottom: 1rem;
    color: #fefefe;
  }

  h2 {
    font-size: 1.75rem;
    margin-bottom: 1rem;
    color: #fefefe;
  }

  p {
    margin-bottom: 1.5rem;
    color: #bababa;
    font-size: clamp(0.875rem, 0.75rem + 1.5vw, 1.125rem);
  }

  ul {
    color: #bababa;
    margin-bottom: 2.5rem;
  }

  li {
    margin-bottom: 1.5rem;
    color: #bababa;
    font-size: clamp(0.875rem, 0.75rem + 1.5vw, 1.125rem);
  }

  hr {
    margin-bottom: 3rem;
    margin-top: 2rem;
  }

  a {
    text-decoration: none;
    color: var(--neonGreen);
    font-weight: 500;
    transition: 0.4s color;

    &:hover {
      color: var(--neonGreenLight);
    }
  }

  p > code,
  li > code {
    background-color: var(--neonGreen);
    padding: 0.25rem;
    color: var(--black);
  }

  pre,
  ul {
    margin-bottom: 1.75rem;
  }

  blockquote {
    padding-left: 2rem;
    font-style: italic;
  }

  iframe {
    width: 100%;
    height: 450px;
    margin-top: 32px;
    margin-bottom: 32px;
  }
</style>

<script>
  const $sectionTitles = document.querySelectorAll(".main-wrapper h2")
  const $sectionLinks = document.querySelectorAll(".section-link")

  document.querySelectorAll(".main-wrapper h2").forEach(h2 => {
    const prev = h2.previousElementSibling;

    if (prev?.tagName === "P" && prev.querySelector("img")) {
      const prevImage = prev.querySelector("img")
      
      if (prevImage) {
        prevImage.classList.add("hero-image");
      }
    }
  });


  function scrollToTitle() {
    $sectionLinks.forEach(link => {
      link.addEventListener("click", event => {
        event.preventDefault();

        const href = link.getAttribute("href");
        if (!href) return;

        const target = document.querySelector(href);
        if (target) {
          const top = target.getBoundingClientRect().top + window.scrollY;
          const offset = 500;

          window.scrollTo({
            top: top - offset,
            behavior: "smooth"
          });
        }
      });
    });
  }


  function onScroll() {
    let closestSection = null;
    let minDistance = Infinity;

    $sectionTitles.forEach(section => {
      const rect = section.getBoundingClientRect();
      const distance = Math.abs(rect.top);

      if (rect.top <= window.innerHeight && distance < minDistance) {
        minDistance = distance;
        closestSection = section;
      }
    });

    $sectionLinks.forEach(link => link.classList.remove("active"));

    if (closestSection) {
      const sectionId = (closestSection as HTMLElement).getAttribute("id")
      const activeLink = document.querySelector(`.section-link[href="#${sectionId}"]`)

      if (activeLink) {
        activeLink.classList.add("active")
      }
    }
  }


  window.addEventListener("scroll", function() {
    onScroll()
  })


  window.addEventListener("DOMContentLoaded", function() {
    scrollToTitle()
  })
</script>
