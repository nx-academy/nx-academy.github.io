---
import type { Breadcrumb } from "../types/Breadcrumb";

type Heading = {
  depth: number;
  slug: string;
  text: string;
};

interface Props {
  frontmatter: {
    title?: string;
    imgSrc?: string;
    publishedDate?: string;
  };
  headings: Heading[];
}

import BaseLayout from "./BaseLayout.astro";
import StickyOutline from "../components/StickyOutline.astro";

const {
  frontmatter: { title, imgSrc, publishedDate },
  headings,
} = Astro.props;

const breadCrumbs: Breadcrumb[] = [
  {
    pageName: "Accueil",
    pageUrl: "/",
  },
  {
    pageName: "Articles",
    pageUrl: "/articles",
  },
];
---

<BaseLayout
  title={title}
  image={imgSrc}
  pubDate={publishedDate}
  breadcrumbs={title === "Le manifeste" || title === "Changelog"
    ? []
    : breadCrumbs}
>
  <main class="main-wrapper">
    <section>
      <article>
        <slot />
      </article>
    </section>
    <aside>
      <div class="aside-wrapper">
        <StickyOutline headings={headings} pageType="fiche" />
      </div>
    </aside>
  </main>
</BaseLayout>

<style>
  main {
    padding-top: 1.5rem;
    padding-bottom: 1.5rem;
    width: 90%;
    max-width: 1100px;
    margin-left: auto;
    margin-right: auto;

    @media screen and (min-width: 1024px) {
      display: grid;
      grid-template-columns: 65% 35%;
      gap: 64px;
    }
  }

  .aside-wrapper {
    display: none;

    @media screen and (min-width: 1024px) {
      background-color: var(--backgroundColorSecondary);
      border-radius: 4px;
      border: 1px solid var(--borderPrimary);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
      display: block;
      padding: 24px;
      position: sticky;
      top: 24px;
    }
  }
</style>

<style is:global>
  h1 {
    font-size: clamp(2.5rem, 0.75rem + 1.5vw, 4rem);
    margin-top: 0;
    margin-bottom: 1rem;
    color: var(--titleColor);
  }

  h2 {
    font-size: 1.75rem;
    margin-bottom: 1rem;
    color: var(--titleColor);
  }

  img {
    width: 100%;
    margin-bottom: 1rem;
    border-radius: 8px;
  }

  p {
    margin-bottom: 1.5rem;
    color: var(--textColor);
    font-size: clamp(0.875rem, 0.75rem + 1.5vw, 1.125rem);
  }

  hr {
    color: var(--borderPrimary);
    margin-top: 1.5rem;
    margin-bottom: 1.5rem;
  }

  a {
    text-decoration: none;
    color: var(--articleLinkColor);
    font-weight: 500;
    transition: 0.4s color;

    &:hover {
      color: var(--articleLinkHoverColor);
    }
  }

  ul {
    color: var(--textColor);
    margin-bottom: 2.5rem;
  }

  li {
    margin-bottom: 1.5rem;
    color: var(--textColor);
    font-size: clamp(0.875rem, 0.75rem + 1.5vw, 1.125rem);
  }

  blockquote {
    margin-top: 2rem;
    margin-bottom: 2rem;
    padding-left: 2rem;
    font-style: italic;
  }

  .brand-name,
  .author {
    font-family: "Pixelify Sans", sans-serif;
  }

  .author {
    font-size: 1.5rem;
  }

  small {
    font-size: 14px;
    color: var(--textColor);
    margin-bottom: 2.5rem;
    display: block;
  }
</style>

<script>
  import handleReadingTime from "../utils/estimateReadingTime";
  handleReadingTime();
</script>
